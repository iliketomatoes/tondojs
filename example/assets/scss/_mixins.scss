// @mixins
//
// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  transition: $property $speed $ease;
}

// generic transform
@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

@mixin no-select {
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// Prefixer
@mixin prefixr ($attr, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      -webkit-#{$attr}: $value;
    }
    @else if $prefix == moz {
      -moz-#{$attr}: $value;
    }
    @else if $prefix == cstm {
      #{$attr}: $value;
    }
  }
}
// Multicolumn @mixin
@mixin col-cstm($col-width: 250px, $col-count: 0, $col-gap: 20px, $col-rule: false) {
  $base-unit-type: 1px;
  $base-unit-size: 1;
  $base-unit: $base-unit-type * $base-unit-size !default;
  @include prefixr(column-width, $col-width, webkit moz cstm);
  @if type-of($col-count) == number and unitless($col-count) {
    @include prefixr(column-count, $col-count, webkit moz cstm);
  }
  @else if type-of($col-count) == number and not unit($base-unit) != px {
    @include prefixr(column-count, 2, webkit moz cstm);
    $col-count: $col-gap;
  }
  @else if type-of($col-count) == number and not unitless($col-count) or length($col-count) > 1 {
    @include prefixr(column-count, 2, webkit moz cstm);
    $col-rule-coords: $col-count;
      $width: nth($col-rule-coords, 1);
      $style: nth($col-rule-coords, 2);
      $color: nth($col-rule-coords, 3);
      @include prefixr(column-rule, $width $style $color, webkit moz cstm);
  }
  @if length($col-gap) > 1 {
    @include prefixr(column-gap, 20px, webkit moz cstm);
    $col-rule-coords: $col-gap;
      $width: nth($col-rule-coords, 1);
      $style: nth($col-rule-coords, 2);
      $color: nth($col-rule-coords, 3);
      @include prefixr(column-rule, $width $style $color, webkit moz cstm);
  }
  @else if length($col-gap) == 1 {
    @include prefixr(column-gap, $col-gap, webkit moz cstm);
  }
  @if $col-rule != false {
    $col-rule-coords: $col-rule;
      $width: nth($col-rule-coords, 1);
      $style: nth($col-rule-coords, 2);
      $color: nth($col-rule-coords, 3);
      @include prefixr(column-rule, $width $style $color, webkit moz cstm);
  }
}

@mixin box_shadow ($level) {

    @if $level == 1 {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    } @else if $level == 2 {
        box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
    } @else if $level == 3 {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    } @else if $level == 4 {
        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
    } @else if $level == 5 {
        box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
    }

}